module.exports = [
	{
		"id": "11",
		"content": "<p>vue传参有几种情况，父组件传参到子组件，子组件传参到父组件，组件之间的传参。一般可以采用props实现父传参到子。采用$emit监控事件可以实现子传参到父和组件之间传参。遇到大型的应用，也可以采用vuex，通过this.$store.state来实现组件间传参。下面是简单的Demo。</p>\n<h2 id=\"-\">父传参到子</h2>\n<p>通过props，父组件可传参到子组件。</p>\n<h3 id=\"-\">子组件</h3>\n<pre><code class=\"lang-javascript\">Vue.component(&#39;child&#39;, {\n  // 声明 props\n  props: [&#39;message&#39;]\n  // 就像 data 一样，prop 也可以在模板中使用\n  // 同样也可以在 vm 实例中通过 this.message 来使用\n  template: &#39;&lt;span&gt;{{ message }}&lt;/span&gt;&#39;\n})；\n</code></pre>\n<h3 id=\"-\">父组件</h3>\n<pre><code class=\"lang-xml\">&lt;child message=&quot;hello!&quot;&gt;&lt;/child&gt;\n</code></pre>\n<h2 id=\"-\">子传父和组件间传参</h2>\n<p>通过$emit和监听事件，子组件可传参到父组件。</p>\n<h3 id=\"-\">子组件发射要传出数据</h3>\n<pre><code class=\"lang-javascript\">this.$emit(&quot;listenToChildEvent&quot;, &quot;this message is from child&quot;);\n</code></pre>\n<h3 id=\"-\">父组件监听子组件传出数据</h3>\n<pre><code class=\"lang-xml\">&lt;child :message=&quot;parentMsg&quot; v-on:listenToChildEvent=&quot;showMsgFromChild&quot; &gt;&lt;/child&gt;\n</code></pre>\n<h2 id=\"vuex-\">Vuex管理传参数据</h2>\n<p>Vuex通过State状态来存储传参数据，通过Mutation来同步修改Vuex的State状态，通过action来异步修改mutation，从而达到异步修改State目的。.commit用于提交状态。.dispatch用于触发状态。</p>\n"
	},
	{
		"id": "12",
		"content": "<h2 id=\"-1-\">以1开头</h2>\n<p>1xx(临时响应)表示临时响应并需要请求者继续执行操作的状态代码。代码 说明\n100 (继续) 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。\n101 (切换协议) 请求者已要求服务器切换协议，服务器已确认并准备切换。</p>\n<h2 id=\"-2-\">以2开头</h2>\n<p>2xx (成功)表示成功处理了请求的状态代码。代码 说明\n200 (成功) 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。\n201 (已创建) 请求成功并且服务器创建了新的资源。\n202 (已接受) 服务器已接受请求，但尚未处理。\n203 (非授权信息) 服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204 (无内容) 服务器成功处理了请求，但没有返回任何内容。\n205 (重置内容) 服务器成功处理了请求，但没有返回任何内容。\n206 (部分内容) 服务器成功处理了部分 GET 请求。</p>\n<h2 id=\"-3-\">以3开头</h2>\n<p>3xx (重定向) 表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。代码 说明\n300 (多种选择) 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n301 (永久移动) 请求的网页已永久移动到新位置。 服务器返回此响应(对 GET 或 HEAD 请求的响应)时，会自动将请求者转到新位置。\n302 (临时移动) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303 (查看其他位置) 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304 (未修改) 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。\n305 (使用代理) 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n307 (临时重定向) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p>\n<h2 id=\"-4-\">以4开头</h2>\n<p>4xx(请求错误) 这些状态代码表示请求可能出错，妨碍了服务器的处理。代码 说明\n400 (错误请求) 服务器不理解请求的语法。\n401 (未授权) 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n403 (禁止) 服务器拒绝请求。\n404 (未找到) 服务器找不到请求的网页。\n405 (方法禁用) 禁用请求中指定的方法。\n406 (不接受) 无法使用请求的内容特性响应请求的网页。\n407 (需要代理授权) 此状态代码与 401(未授权)类似，但指定请求者应当授权使用代理。\n408 (请求超时) 服务器等候请求时发生超时。\n409 (冲突) 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。\n410 (已删除) 如果请求的资源已永久删除，服务器就会返回此响应。\n411 (需要有效长度) 服务器不接受不含有效内容长度标头字段的请求。\n412 (未满足前提条件) 服务器未满足请求者在请求中设置的其中一个前提条件。\n413 (请求实体过大) 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414 (请求的 URI 过长) 请求的 URI(通常为网址)过长，服务器无法处理。\n415 (不支持的媒体类型) 请求的格式不受请求页面的支持。\n416 (请求范围不符合要求) 如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417 (未满足期望值) 服务器未满足&quot;期望&quot;请求标头字段的要求。</p>\n<h2 id=\"-5-\">以5开头</h2>\n<p>5xx(服务器错误)这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。代码 说明\n500 (服务器内部错误) 服务器遇到错误，无法完成请求。\n501 (尚未实施) 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502 (错误网关) 服务器作为网关或代理，从上游服务器收到无效响应。\n503 (服务不可用) 服务器目前无法使用(由于超载或停机维护)。 通常，这只是暂时状态。\n504 (网关超时) 服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n505 (HTTP 版本不受支持) 服务器不支持请求中所用的 HTTP 协议版本。</p>\n<h2 id=\"-\">总结</h2>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>响应类别</th>\n<th>原因短语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1XX</td>\n<td>信息性状态码（Informational）</td>\n<td>服务器正在处理请求</td>\n</tr>\n<tr>\n<td>2XX</td>\n<td>成功状态码（Success）</td>\n<td>请求已正常处理完毕</td>\n</tr>\n<tr>\n<td>3XX</td>\n<td>重定向状态码（Redirection）</td>\n<td>需要进行额外操作以完成请求</td>\n</tr>\n<tr>\n<td>4XX</td>\n<td>客户端错误状态码（Client Error）</td>\n<td>客户端原因导致服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td>服务器错误状态码（Server Error）</td>\n<td>服务器原因导致处理请求出错</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>大时代</th>\n<th>我们</th>\n<th>你们</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>12XX</td>\n<td>信息性状态码（Informational）</td>\n<td>服务器正在处理请求</td>\n</tr>\n<tr>\n<td>23X</td>\n<td>成功状态码（Success）</td>\n<td>请求已正常处理完毕</td>\n</tr>\n<tr>\n<td>34XX</td>\n<td>重定向状态码（Redirection）</td>\n<td>需要进行额外操作以完成请求</td>\n</tr>\n<tr>\n<td>4dXX</td>\n<td>客户端错误状态码（Client Error）</td>\n<td>客户端原因导致服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td>服务器错误状态码（Server Error）</td>\n<td>服务器原因导致处理请求出错</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>吃饭</th>\n<th>牛头</th>\n<th>剑魔</th>\n<th>建好</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>12XX</td>\n<td>信息性状态码（Informational）</td>\n<td>服务器正在处理请求</td>\n<td>1</td>\n</tr>\n<tr>\n<td>23X</td>\n<td>成功状态码（Success）</td>\n<td>请求已正常处理完毕</td>\n<td>2</td>\n</tr>\n<tr>\n<td>34XX</td>\n<td>重定向状态码（Redirection）</td>\n<td>需要进行额外操作以完成请求</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4dXX</td>\n<td>客户端错误状态码（Client Error）</td>\n<td>客户端原因导致服务器无法处理请求</td>\n<td>4</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td>服务器错误状态码（Server Error）</td>\n<td>服务器原因导致处理请求出错</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<p>200 OK\n请求正常处理完毕\n204 No Content\n请求成功处理，没有实体的主体返回\n206 Partial Content\nGET范围请求已成功处理\n301 Moved Permanently\n永久重定向，资源已永久分配新URI\n302 Found\n临时重定向，资源已临时分配新URI\n303 See Other\n临时重定向，期望使用GET定向获取\n304 Not Modified\n发送的附带条件请求未满足\n307 Temporary Redirect\n临时重定向，POST不会变成GET\n400 Bad Request\n请求报文语法错误或参数错误\n401 Unauthorized\n需要通过HTTP认证，或认证失败\n403 Forbidden\n请求资源被拒绝\n404 Not Found\n无法找到请求资源（服务器无理由拒绝）\n500 Internal Server Error\n服务器故障或Web应用故障\n503 Service Unavailable\n服务器超负载或停机维护</p>\n"
	},
	{
		"id": "13",
		"content": "<h2 id=\"-\">世界微商大会页面接口设计</h2>\n<h3 id=\"-\">轮播图沿用之前接口</h3>\n<h2 id=\"-\">首页</h2>\n<h3 id=\"-\">获取会场信息</h3>\n<ul>\n<li>请求路径</li>\n</ul>\n<pre><code class=\"lang-javascript\">GET /v0/meeting/primary  请求主会场\nGET ／v0/meeting／secondary  请求分会场\n\n&lt;!--补充说明--&gt;\n两者的返回消息一致 \n</code></pre>\n<ul>\n<li>返回消息</li>\n</ul>\n<pre><code class=\"lang-javascript\">{\n    status: &#39;&#39;,\n    data: [\n        {\n          id: &#39;&#39;, //活动id，唯一\n          avatar: &#39;&#39;, // 照片url\n          name : &#39;&#39;,  // 票的名称\n          beginedAt: &#39;&#39;,  //开始时间\n          limitNum: &#39;&#39;, // 票的限制数量\n          restNum: &#39;&#39; // 剩余票的数量\n          price: &#39;&#39;, 票的价格\n        }\n    ]\n}\n</code></pre>\n<h3 id=\"-\">获取课程信息</h3>\n<ul>\n<li><p>请求路径</p>\n<pre><code class=\"lang-javascript\">GET /v0/course\n</code></pre>\n</li>\n<li><p>返回消息</p>\n<pre><code class=\"lang-javascript\">{\n  status: &#39;&#39;,\n  data: [\n      {\n        id: ‘’， //课程id，唯一\n        img: &#39;&#39;, // 照片url\n        name : &#39;&#39;,  // 课程的名称\n        desc: &#39;&#39;,  //课程介绍\n        price: &#39;&#39;, // 课程价格\n      }\n  ]\n}\n</code></pre>\n</li>\n</ul>\n<h3 id=\"-\">获取战略合作伙伴信息</h3>\n<ul>\n<li><p>请求路径</p>\n<pre><code class=\"lang-javascript\">GET v0/partners\n</code></pre>\n</li>\n<li><p>返回消息</p>\n<pre><code class=\"lang-javascript\">{\n  status: &#39;&#39;,\n  data: [\n      {\n        img: &#39;&#39;, // 照片url\n      }\n  ]\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"-\">详情 (活动详情)</h2>\n<ul>\n<li><p>请求路径</p>\n<pre><code class=\"lang-javascript\">GET v0/meeting／{{id}}\n</code></pre>\n<ul>\n<li>返回消息<pre><code class=\"lang-javascript\">{\nstatus: &#39;&#39;,\ndata: [\n    {\n      banner: &#39;&#39;, // 活动宣传图\n      name: &#39;&#39;, // 票的名称\n      price: &#39;&#39;,// 价格\n      beginedAt:&#39;&#39;, //活动开始时间\n      endedAt: &#39;&#39;,//活动结束时间 \n      status: &#39;&#39;, // 判断是否还能买票，1表示可以，0表示报名结束。不能。\n      viewedNum: &#39;&#39;, //浏览人数\n      sharedNum: &#39;&#39;, //分享人数\n      address: &#39;&#39;, // 地点\n      signedNum: &#39;&#39;, //已经报名人数\n      limitedNum:\n      restNum: &#39;&#39;， //剩余票数\n      organizer:{\n          name: &#39;&#39;, // 名字\n          desc: &#39;&#39;, // 简介\n          img: &#39;&#39;, // 头像\n          phone: &#39;&#39;, //联系方式\n      }，\n      introduction: &#39;&#39;// 活动介绍图片\n    }\n]\n}\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"-\">详情 (课程详情)</h2>\n<ul>\n<li><p>请求路径</p>\n<pre><code class=\"lang-javascript\">GET /v0/course／{{id}}\n&lt;!--补充说明--&gt;\n由于模版相同，课程详情和活动详情接口返回数据格式相同，只是内容不一样\n&lt;!--补充说明--&gt;\n</code></pre>\n<ul>\n<li>返回消息<pre><code class=\"lang-javascript\">{\nstatus: &#39;&#39;,\ndata: [\n    {\n      banner: &#39;&#39;, // 宣传图\n      name: &#39;&#39;, // 票的名称\n      price： ‘’,// 价格\n      beginedAt：&#39;&#39;, //开始时间\n      endedAt: &#39;&#39;,//结束时间 \n      status： ‘’, // 判断是否还能买票，1表示可以，0表示报名结束。不能。\n      viewedNum: &#39;&#39;, //浏览人数\n      sharedNum: &#39;&#39;, //分享人数\n      address: &#39;&#39;, // 地点\n      signedNum: &#39;&#39;, //已经报名人数\n      limitedNum:\n      restNum：‘’， //剩余票数\n      organizer：{\n          name: &#39;&#39;, // 名字\n          desc: &#39;&#39;, // 简介\n          img: &#39;&#39;, // 头像\n          phone: &#39;&#39;, //联系方式\n      }，\n      introduction：‘’，// 介绍图片\n    }\n]\n}\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"-\">回顾</h2>\n<h3 id=\"-\">视频回顾</h3>\n<ul>\n<li><p>请求路径</p>\n<pre><code class=\"lang-javascript\">GET /v0/history/video\n</code></pre>\n</li>\n<li><p>返回消息</p>\n<pre><code class=\"lang-javascript\">{\n  status: &#39;&#39;,\n  data: [\n      {\n        videoUrl: &#39;&#39;, //视频回顾中视频的URL\n        desc : &#39;&#39;, // 介绍说明\n        placeType: &#39;&#39;, 地点类型，1表示主会场，2表示分会场。\n      }\n  ]\n}\n</code></pre>\n</li>\n</ul>\n<h3 id=\"-\">图文回顾</h3>\n<pre><code class=\"lang-javascript\">GET /v0/history/graphic\n</code></pre>\n<ul>\n<li>返回消息<pre><code class=\"lang-javascript\">{\n  status: &#39;&#39;,\n  data: [\n      {\n        avatar: &#39;&#39;, // 图文回顾中图片url\n        desc : &#39;&#39;, // 介绍说明\n        updatedAt: &#39;&#39;, //仅在图文回顾中存在，显示时间\n        viewedNum: &#39;&#39;, // 浏览次数，仅在图文回顾中出现\n      }\n  ]\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"-\">嘉宾</h2>\n<ul>\n<li><p>请求路径</p>\n<pre><code class=\"lang-javascript\">GET /v0/guest\n</code></pre>\n</li>\n<li><p>返回消息</p>\n<pre><code class=\"lang-javascript\">{\n  status: &#39;&#39;,\n  data: [\n      {\n        //img: &#39;&#39;, // 图片url\n        avatar: &#39;&#39;,\n        name : &#39;&#39;, // 嘉宾名字\n        desc: &#39;&#39;, //嘉宾介绍\n      }\n  ]\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"-\">议程</h2>\n<ul>\n<li>请求路径<pre><code class=\"lang-javascript\">GET /v0/schedule\n//  议程数据量较少，都是图片，可以选择不做接口\n</code></pre>\n</li>\n<li>返回消息<pre><code class=\"lang-javascript\">{\n  status: &#39;&#39;,\n  data: [\n      {\n        img: &#39;&#39;, // 图片url\n        date : &#39;&#39;, // 日期时间\n      }\n  ]\n}\n</code></pre>\n<h2 id=\"-\">指南</h2>\n</li>\n<li><p>请求路径</p>\n<pre><code class=\"lang-javascript\">GET /v0/guide\n// 指南同理，这里可以不做接口,直接使用本地图片。\n</code></pre>\n</li>\n<li><p>返回消息</p>\n<pre><code class=\"lang-javascript\">{\n  status: &#39;&#39;,\n  data: {\n        img: &#39;&#39;, // 图片url\n      }\n}\n</code></pre>\n</li>\n</ul>\n<h1 id=\"-\">新加接口</h1>\n<h2 id=\"-openid\">首页openId</h2>\n<ul>\n<li>请求路径<pre><code class=\"lang-javascript\">GET /v0/openId\n</code></pre>\n</li>\n<li><p>请求参数</p>\n<pre><code class=\"lang-javascript\">data: {code: &#39;&#39;}\n</code></pre>\n</li>\n<li><p>返回消息</p>\n<pre><code class=\"lang-javascript\">{\n  status: &#39;&#39;,\n  data: {\n          &quot;openId&quot;: &quot;&quot;,\n          &quot;&quot;: &quot;&quot;\n      }\n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"-\">个人中心页面</h2>\n<h3 id=\"-\">我的首页</h3>\n<ul>\n<li>请求路径\n<code>`</code> javascript\nGET /v0/user{openId}</li>\n</ul>\n<pre><code>\n- 返回消息\n``` javascript\n{\n    status: &#39;&#39;,\n    data: {\n            &quot;signedNum&quot;: &quot;&quot;,\n            &quot;collectedNum&quot;: &quot;&quot;\n        }\n}\n</code></pre><h3 id=\"-\">我的报名</h3>\n<ul>\n<li>请求路径\n<code>`</code> javascript\nGET /v0/signed</li>\n</ul>\n<pre><code>\n- 请求参数\n``` javascript\ndata: {openId: &#39;&#39;}\n</code></pre><ul>\n<li>返回消息<pre><code class=\"lang-javascript\">{\n  status: &#39;&#39;,\n  data: [\n   {\n    banner: &quot;&quot;,\n    name: &quot;&quot;\n   }\n  ]\n}\n</code></pre>\n</li>\n</ul>\n<h3 id=\"-\">我的收藏</h3>\n<ul>\n<li>请求路径\n<code>`</code> javascript\nGET /v0/collected</li>\n</ul>\n<pre><code>\n- 请求参数\n``` javascript\ndata: {openId: &#39;&#39;}\n</code></pre><ul>\n<li>返回消息<pre><code class=\"lang-javascript\">{\n  status: &#39;&#39;,\n  data: [\n   {\n    banner: &quot;&quot;,\n    name: &quot;&quot;\n   }\n  ]\n}\n</code></pre>\n</li>\n</ul>\n<h3 id=\"-\">我的订单</h3>\n<ul>\n<li><p>请求路径</p>\n<pre><code class=\"lang-javascript\">GET /v0/order/all  全部订单\nGET /v0/order/coming  待参与\nGET /v0/order/finished  完成\nGET /v0/order/reimburse   退款\nGET /v0/order/cancel    取消\n</code></pre>\n</li>\n<li><p>请求参数</p>\n<pre><code class=\"lang-javascript\">data: {openId: &#39;&#39;}\n</code></pre>\n</li>\n<li><p>返回消息</p>\n<pre><code class=\"lang-javascript\">{\n  status: &#39;&#39;,\n  data: [\n   {\n    banner: &quot;&quot;,\n    name: &quot;&quot;\n   }\n  ]\n}\n</code></pre>\n</li>\n</ul>\n<h3 id=\"-\">功能</h3>\n<h4 id=\"-\">收藏</h4>\n<ul>\n<li>增删收藏</li>\n<li>请求路径<pre><code class=\"lang-javascript\">POST /v0/collect\n</code></pre>\n</li>\n<li>请求参数\n<code>`</code> javascript\ndata: {\nopenId: &#39;&#39;,\ntype: &#39;&#39;,\nname: &#39;&#39;,\naction: &#39;cancel or add&#39;</li>\n</ul>\n<p>}</p>\n<pre><code>\n#### 报名\n- 请求路径\n``` javascript\nPOST /v0/sign\n</code></pre><ul>\n<li>请求参数<pre><code class=\"lang-javascript\">data: {\n  openId: &#39;&#39;,\n  username: &#39;&#39;,\n  phone: &#39;&#39;,\n  cost: &#39;&#39;,\n  ticketname: &#39;&#39;,\n  tickettype: &#39;&#39;\n}\n</code></pre>\n</li>\n</ul>\n<h4 id=\"-\">项目查看</h4>\n<pre><code class=\"lang-javascript\">POST /v0/view\n</code></pre>\n<pre><code>{\n    data: {\n        type: &#39;&#39;,\n        name: &#39;&#39;,\n        openId: &#39;&#39;\n    }\n}\n</code></pre><h4 id=\"share\">share</h4>\n<pre><code class=\"lang-javascript\">POST /v0/share\n</code></pre>\n<pre><code>{\n    data: {\n        type: &#39;&#39;,\n        name: &#39;&#39;,\n        openId: &#39;&#39;\n    }\n}\n</code></pre>"
	},
	{
		"id": "14",
		"content": "<p>vue传参有几种情况，父组件传参到子组件，子组件传参到父组件，组件之间的传参。一般可以采用props实现父传参到子。采用$emit监控事件可以实现子传参到父和组件之间传参。遇到大型的应用，也可以采用vuex，通过this.$store.state来实现组件间传参。下面是简单的Demo。</p>\n<h2 id=\"-\">父传参到子</h2>\n<p>通过props，父组件可传参到子组件。</p>\n<h3 id=\"-\">子组件</h3>\n<pre><code class=\"lang-javascript\">Vue.component(&#39;child&#39;, {\n  // 声明 props\n  props: [&#39;message&#39;]\n  // 就像 data 一样，prop 也可以在模板中使用\n  // 同样也可以在 vm 实例中通过 this.message 来使用\n  template: &#39;&lt;span&gt;{{ message }}&lt;/span&gt;&#39;\n})；\n</code></pre>\n<h3 id=\"-\">父组件</h3>\n<pre><code class=\"lang-xml\">&lt;child message=&quot;hello!&quot;&gt;&lt;/child&gt;\n</code></pre>\n<h2 id=\"-\">子传父和组件间传参</h2>\n<p>通过$emit和监听事件，子组件可传参到父组件。</p>\n<h3 id=\"-\">子组件发射要传出数据</h3>\n<pre><code class=\"lang-javascript\">this.$emit(&quot;listenToChildEvent&quot;, &quot;this message is from child&quot;);\n</code></pre>\n<h3 id=\"-\">父组件监听子组件传出数据</h3>\n<pre><code class=\"lang-xml\">&lt;child :message=&quot;parentMsg&quot; v-on:listenToChildEvent=&quot;showMsgFromChild&quot; &gt;&lt;/child&gt;\n</code></pre>\n<h2 id=\"vuex-\">Vuex管理传参数据</h2>\n<p>Vuex通过State状态来存储传参数据，通过Mutation来同步修改Vuex的State状态，通过action来异步修改mutation，从而达到异步修改State目的。.commit用于提交状态。.dispatch用于触发状态。</p>\n"
	}
]